<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MiFeng&#39;s Blog</title>
  <icon>https://mifeng.cyou/icon.png</icon>
  <subtitle>诚敬静谨恒</subtitle>
  <link href="https://mifeng.cyou/atom.xml" rel="self"/>
  
  <link href="https://mifeng.cyou/"/>
  <updated>2021-09-26T01:59:35.600Z</updated>
  <id>https://mifeng.cyou/</id>
  
  <author>
    <name>蜜蜂</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>no_Jcc</title>
    <link href="https://mifeng.cyou/2021/09/26/no-Jcc/"/>
    <id>https://mifeng.cyou/2021/09/26/no-Jcc/</id>
    <published>2021-09-26T09:56:05.000Z</published>
    <updated>2021-09-26T01:59:35.600Z</updated>
    
    
    <summary type="html">&lt;p&gt;如何不使用 JCC，做判断跳转？&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="https://mifeng.cyou/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>X64 调用约定</title>
    <link href="https://mifeng.cyou/2021/09/01/X64-%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>https://mifeng.cyou/2021/09/01/X64-%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</id>
    <published>2021-09-01T14:32:18.000Z</published>
    <updated>2021-09-01T07:49:23.442Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;X64 只有一种调用约定，__cdecl __stdcall __fastcall</summary>
        
      
    
    
    
    <category term="Windows逆向" scheme="https://mifeng.cyou/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>让EXE也拥有DllMain</title>
    <link href="https://mifeng.cyou/2021/04/02/%E8%AE%A9EXE%E4%B9%9F%E6%8B%A5%E6%9C%89DllMain/"/>
    <id>https://mifeng.cyou/2021/04/02/%E8%AE%A9EXE%E4%B9%9F%E6%8B%A5%E6%9C%89DllMain/</id>
    <published>2021-04-01T16:53:46.000Z</published>
    <updated>2021-06-26T12:59:46.539Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;众所周知，DllMain 有几个神奇的力量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程创建通知（DLL_THREAD_ATTACH）&lt;/li&gt;
&lt;li&gt;线程结束通知（DLL_THREAD_DETACH）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="https://mifeng.cyou/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>编译器扩展SEH-展开</title>
    <link href="https://mifeng.cyou/2021/04/02/%E7%BC%96%E8%AF%91%E5%99%A8%E6%89%A9%E5%B1%95SEH-%E5%B1%95%E5%BC%80/"/>
    <id>https://mifeng.cyou/2021/04/02/%E7%BC%96%E8%AF%91%E5%99%A8%E6%89%A9%E5%B1%95SEH-%E5%B1%95%E5%BC%80/</id>
    <published>2021-04-01T16:19:28.000Z</published>
    <updated>2021-04-01T08:50:58.633Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;首先让我们熟悉一下，__finally 关键字。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__try&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//goto lable;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__finally						&lt;span class=&quot;comment&quot;&gt;//__finally 的作用就是在退出 try 的时候，必将执行里面的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;__finally\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lable:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;success\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getchar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>编译器扩展SEH</title>
    <link href="https://mifeng.cyou/2021/03/30/%E7%BC%96%E8%AF%91%E5%99%A8%E6%89%A9%E5%B1%95SEH/"/>
    <id>https://mifeng.cyou/2021/03/30/%E7%BC%96%E8%AF%91%E5%99%A8%E6%89%A9%E5%B1%95SEH/</id>
    <published>2021-03-30T08:18:35.000Z</published>
    <updated>2021-03-30T02:15:07.648Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;在 Windows 下做C++开发的都知道。VC 编译器有几个异常处理的关键字：__try __except __finally。那么编译器是怎么捕获异常的呢？怎么处理异常的呢？&lt;/p&gt;
&lt;h1 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h1&gt;&lt;p&gt;因为不同的编译器，可能不一样。大体上来说是一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台工具集：Visual Studio 2015 - Windows xp&lt;/li&gt;
&lt;li&gt;编译模式：Release&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>用户异常派发</title>
    <link href="https://mifeng.cyou/2021/03/17/%E7%94%A8%E6%88%B7%E5%BC%82%E5%B8%B8%E6%B4%BE%E5%8F%91/"/>
    <id>https://mifeng.cyou/2021/03/17/%E7%94%A8%E6%88%B7%E5%BC%82%E5%B8%B8%E6%B4%BE%E5%8F%91/</id>
    <published>2021-03-16T18:27:53.000Z</published>
    <updated>2021-03-16T11:10:36.380Z</updated>
    
    
    <summary type="html">&lt;p&gt;用户层发生异常时，处理函数在用户层，这时就要从内核层返回用户层处理。相比内核发生异常，处理起来要麻烦一些。&lt;br&gt;异常返回用户层和用户APC返回用户层处理流程大体上相同，只不过，到用户层的EIP不一样。&lt;br&gt;用户层APC：KiUserApcDispatcher，用户层异常：KiUserDispatchDispatcher。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>内核异常派发</title>
    <link href="https://mifeng.cyou/2021/03/09/%E5%86%85%E6%A0%B8%E5%BC%82%E5%B8%B8%E6%B4%BE%E5%8F%91/"/>
    <id>https://mifeng.cyou/2021/03/09/%E5%86%85%E6%A0%B8%E5%BC%82%E5%B8%B8%E6%B4%BE%E5%8F%91/</id>
    <published>2021-03-08T16:36:38.000Z</published>
    <updated>2021-03-08T10:56:31.901Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;KiDispatchException-分析&quot;&gt;&lt;a href=&quot;#KiDispatchException-分析&quot; class=&quot;headerlink&quot; title=&quot;KiDispatchException 分析&quot;&gt;&lt;/a&gt;KiDispatchException 分析&lt;/h1&gt;&lt;p&gt;无论是内核发生的异常还是用户发生的异常，最终都会走到 KiDispatchException 中派发。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>软件模拟异常记录</title>
    <link href="https://mifeng.cyou/2021/03/04/%E8%BD%AF%E4%BB%B6%E6%A8%A1%E6%8B%9F%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <id>https://mifeng.cyou/2021/03/04/%E8%BD%AF%E4%BB%B6%E6%A8%A1%E6%8B%9F%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-04T01:04:35.000Z</published>
    <updated>2021-03-03T18:07:17.030Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;软件模拟异常：这个异常不是CPU在执行的时候产生的，而且软件模拟的。C++ 中的 throw 关键字。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>CPU异常记录</title>
    <link href="https://mifeng.cyou/2021/03/03/CPU%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <id>https://mifeng.cyou/2021/03/03/CPU%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-02T21:19:41.000Z</published>
    <updated>2021-03-04T09:52:36.997Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;异常种类&quot;&gt;&lt;a href=&quot;#异常种类&quot; class=&quot;headerlink&quot; title=&quot;异常种类&quot;&gt;&lt;/a&gt;异常种类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;错误类：CPU在执行当前指令的时候，发生错误。（除零异常等等）&lt;/li&gt;
&lt;li&gt;陷阱类：CPU已经执行完了当前指令，产生异常。（int3 TF单步等等）&lt;/li&gt;
&lt;li&gt;终止类：一般就是不能修复的异常。在内核中就直接蓝屏了，在应用层进程就直接退出。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>陷阱门与中断门</title>
    <link href="https://mifeng.cyou/2021/02/08/%E9%99%B7%E9%98%B1%E9%97%A8%E4%B8%8E%E4%B8%AD%E6%96%AD%E9%97%A8/"/>
    <id>https://mifeng.cyou/2021/02/08/%E9%99%B7%E9%98%B1%E9%97%A8%E4%B8%8E%E4%B8%AD%E6%96%AD%E9%97%A8/</id>
    <published>2021-02-08T11:50:37.000Z</published>
    <updated>2020-07-17T08:33:47.715Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;中断的认识&quot;&gt;&lt;a href=&quot;#中断的认识&quot; class=&quot;headerlink&quot; title=&quot;中断的认识&quot;&gt;&lt;/a&gt;中断的认识&lt;/h1&gt;&lt;p&gt;在 Windows 中并没有使用调用门，但是使用了中断门。&lt;br&gt;中断表（IDT）中有三种中断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;陷阱门&lt;/li&gt;
&lt;li&gt;中断门&lt;/li&gt;
&lt;li&gt;任务门&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>调用门</title>
    <link href="https://mifeng.cyou/2021/02/02/%E8%B0%83%E7%94%A8%E9%97%A8/"/>
    <id>https://mifeng.cyou/2021/02/02/%E8%B0%83%E7%94%A8%E9%97%A8/</id>
    <published>2021-02-02T13:57:36.000Z</published>
    <updated>2021-02-02T07:22:57.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;如何理解调用门的-“门”-这个字？&quot;&gt;&lt;a href=&quot;#如何理解调用门的-“门”-这个字？&quot; class=&quot;headerlink&quot; title=&quot;如何理解调用门的 “门” 这个字？&quot;&gt;&lt;/a&gt;如何理解调用门的 “门” 这个字？&lt;/h1&gt;&lt;p&gt;门，通往另一个世界的通道。3环提权到0环的一个手段。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>段描述符详解</title>
    <link href="https://mifeng.cyou/2021/02/02/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://mifeng.cyou/2021/02/02/%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-01T17:30:55.000Z</published>
    <updated>2021-02-01T10:17:49.175Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;前面的文章中简单的介绍了“段描述符”。那么现在就介绍一下其他字段。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>GDT表与段描述符</title>
    <link href="https://mifeng.cyou/2021/01/31/GDT%E8%A1%A8%E4%B8%8E%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    <id>https://mifeng.cyou/2021/01/31/GDT%E8%A1%A8%E4%B8%8E%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6/</id>
    <published>2021-01-30T21:35:58.000Z</published>
    <updated>2021-01-31T05:26:25.987Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;前面的文章中，介绍了什么是段寄存器和段选择子。接下来我们来介绍一下，怎么通过段选择子获取到其他信息（base 等等）。&lt;/p&gt;
&lt;h1 id=&quot;段选择子与GDT表&quot;&gt;&lt;a href=&quot;#段选择子与GDT表&quot; class=&quot;headerlink&quot; title=&quot;段选择子与GDT表&quot;&gt;&lt;/a&gt;段选择子与GDT表&lt;/h1&gt;&lt;p&gt;通过前面的文章中，我们可以了解到段寄存器（DS….）保存是段选择子。&lt;br&gt;段选择子指明其他信息的位置：查哪张表，在表中的位置，段的请求权限等级&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>段寄存器结构</title>
    <link href="https://mifeng.cyou/2021/01/29/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://mifeng.cyou/2021/01/29/%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84/</id>
    <published>2021-01-28T16:38:10.000Z</published>
    <updated>2021-02-01T10:13:43.119Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;保护模式有两大机制：段和页&lt;br&gt;想了解段机制就要先了解 &lt;font color=&quot;RED&quot;&gt;段寄存器&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是保护模式？</title>
    <link href="https://mifeng.cyou/2021/01/29/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9F/"/>
    <id>https://mifeng.cyou/2021/01/29/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%EF%BC%9F/</id>
    <published>2021-01-28T16:30:24.000Z</published>
    <updated>2021-01-28T08:36:25.827Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;什么是保护模式？&quot;&gt;&lt;a href=&quot;#什么是保护模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是保护模式？&quot;&gt;&lt;/a&gt;什么是保护模式？&lt;/h1&gt;&lt;p&gt;x86 CPU 有三个模式。分别为：实模式、保护模式、虚拟8086模式&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows内核研究</title>
    <link href="https://mifeng.cyou/2021/01/29/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    <id>https://mifeng.cyou/2021/01/29/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/</id>
    <published>2021-01-28T16:10:20.000Z</published>
    <updated>2021-04-01T08:20:45.686Z</updated>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
&lt;p&gt;还在机场等船吗？ &lt;/p&gt;

&lt;/blockquote&gt;
&lt;hr&gt;

&lt;p&gt;关于 Windows 内核的学习，也学习了一段时间了，没有详细的做笔记，至此准备详细的做一下笔记，并以博客的方式分享出来。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows内核研究" scheme="https://mifeng.cyou/categories/Windows%E5%86%85%E6%A0%B8%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>利用ESP8266制作WIFI杀手</title>
    <link href="https://mifeng.cyou/2021/01/27/%E5%88%B6%E4%BD%9CWIFI%E6%9D%80%E6%89%8B/"/>
    <id>https://mifeng.cyou/2021/01/27/%E5%88%B6%E4%BD%9CWIFI%E6%9D%80%E6%89%8B/</id>
    <published>2021-01-27T12:42:54.000Z</published>
    <updated>2021-01-28T08:20:03.592Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是ESP8266？&quot;&gt;&lt;a href=&quot;#什么是ESP8266？&quot; class=&quot;headerlink&quot; title=&quot;什么是ESP8266？&quot;&gt;&lt;/a&gt;什么是ESP8266？&lt;/h1&gt;&lt;p&gt;ESP8266是基于Arduino开发的单片机，简单来说就是一个WIFI物联网模块，实际应用很广。而且技术成熟，成本低廉，也就十几块钱的事。&lt;/p&gt;</summary>
    
    
    
    <category term="ESP8266" scheme="https://mifeng.cyou/categories/ESP8266/"/>
    
    
  </entry>
  
</feed>
